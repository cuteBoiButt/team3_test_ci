# Copyright (c) 2021-2022-2023-2024 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# The workflow runs on x64 and ARM platforms.
# Workflow steps:
# - Setup vcpkg and cache it on the GitHub Action cloud based cache.
# - Runs CMake with CMakePreset.json using a presest configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg
#   to install dependencies described by the vcpkg.json manifest file.
#   This stage also runs vcpkg with Binary Caching leveraging GitHub Action cache to
#   store the built packages artifacts, hence it will be a no-op if those are restored
#   from cache (e.g., already previously built).
# - Finally builds the sources with Ninja, and tests as well.
name: hosted-ninja-vcpkg_submod-autocache
on:
  push:
    pull_request:
    branches:
    - main

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-13, windows-2025]
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # Restore vcpkg binary cache from the GitHub Action cache service.
      - name: Restore vcpkg cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-vcpkg-${{ hashFiles( '.git/modules/vcpkg/HEAD' ) }}
          restore-keys: ${{ runner.os }}-vcpkg-

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Get required deps on Ubntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y bison flex autoconf libltdl-dev python3-jinja2 libx11-dev libxft-dev libxext-dev libxi-dev libxtst-dev libxrandr-dev

      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset ninja-multi-vcpkg

      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release

      - name: Package (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release --target package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ matrix.os }}
          path: |
            build/*.dmg
            build/*.zip
            build/*.tar.gz
